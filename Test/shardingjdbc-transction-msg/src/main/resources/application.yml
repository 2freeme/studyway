spring:
  shardingsphere:
    datasource:
      #  数据库名称，可自定义，可以为多个，以逗号隔开，每个在这里定义的库，都要在下面定义连接属性
      names: tc-sharding-00,tc-sharding-01,tc-sharding-02,tc-sharding-03
      tc-sharding-00:
        #  采用的数据库连接池，druid
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.43.101:3306/tc-sharding-00?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: sunhuo
        maxActive: 5
        initialSize: 5
      tc-sharding-01:
        #  采用的数据库连接池，druid
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.43.101:3306/tc-sharding-01?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: sunhuo
        maxActive: 5
        initialSize: 5        
      tc-sharding-02:
        #  采用的数据库连接池，druid
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.43.101:3306/tc-sharding-02?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: sunhuo
        maxActive: 5
        initialSize: 5        
      tc-sharding-03:
        #  采用的数据库连接池，druid
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.43.101:3306/tc-sharding-03?useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: sunhuo
        maxActive: 5
        initialSize: 5        
                                                                                              
    sharding:  
      #default-data-source-name: tc-sharding-00
      #需要拆分的表，可以设置多个
      tables:
        #需要进行分表的逻辑表名，用MyBatis或者MyBatis-Plus操作数据库时只需要操作逻辑表即可，xml文件也只需要配置逻辑表
        tc_order:
          #实际的表结点,下面代表的是t_order_为开头的所有表，如果能确定表的范围例如按月份分表，这里的写法是ds$->{2019..2020}.t_order_&->{01..12}表示12个月的表
          actual-data-nodes: tc-sharding-$->{(0..3).collect{t ->t.toString().padLeft(2,'0')}}.tc_order_$->{(0..31).collect{t ->t.toString().padLeft(2,'0')}}
          #分库策略，按照创建时间的年份分库，如果不用分库的，直接注释掉分库相关的代码
          database-strategy:
            complex:
              sharding-columns: user_id,order_no
              algorithm-class-name: com.example.demo.config.sharding.OrderDatasourceComplexKeysShardingAlgorithm
          table-strategy:
            # 分表策略，根据自己的需要写的分表策略，这里我是根据car_park_id这个字段的值作为后缀，来确定放到哪张表
            complex:
              sharding-columns: user_id,order_no
              algorithm-class-name: com.example.demo.config.sharding.OrderTableComplexKeysShardingAlgorithm 
        tc_order_detail:
          #实际的表结点,下面代表的是t_order_为开头的所有表，如果能确定表的范围例如按月份分表，这里的写法是ds$->{2019..2020}.t_order_&->{01..12}表示12个月的表
          actual-data-nodes: tc-sharding-$->{(0..3).collect{t ->t.toString().padLeft(2,'0')}}.tc_order_detail_$->{(0..31).collect{t ->t.toString().padLeft(2,'0')}}
          #ds0.user_order_$->{2019..2030}${(1..12).collect{t ->t.toString().padLeft(2,'0')}}
          #分库策略，按照创建时间的年份分库，如果不用分库的，直接注释掉分库相关的代码
          database-strategy:
            complex:
              sharding-columns: user_id,order_no
              algorithm-class-name: com.example.demo.config.sharding.OrderDatasourceComplexKeysShardingAlgorithm
          table-strategy:
            # 分表策略，根据自己的需要写的分表策略，这里我是根据car_park_id这个字段的值作为后缀，来确定放到哪张表
            complex:
              sharding-columns: user_id,order_no
              algorithm-class-name: com.example.demo.config.sharding.OrderTableComplexKeysShardingAlgorithm 
        t_transaction_msg:
          #实际的表结点,下面代表的是t_order_为开头的所有表，如果能确定表的范围例如按月份分表，这里的写法是ds$->{2019..2020}.t_order_&->{01..12}表示12个月的表
          actual-data-nodes: tc-sharding-$->{(0..3).collect{t ->t.toString().padLeft(2,'0')}}.t_transaction_msg
          #ds0.user_order_$->{2019..2030}${(1..12).collect{t ->t.toString().padLeft(2,'0')}}
          #分库策略，按照创建时间的年份分库，如果不用分库的，直接注释掉分库相关的代码
          database-strategy:
            standard:
              sharding-column: sharding_column
              precise-algorithm-class-name: com.example.demo.config.sharding.TransanMsgDatabaseAlgorithm
      binding-tables: tc_order,tc_order_detail

#      # 配置广播表：以广播的形式保存（如果只涉及查询的话可以不配置，会随机取一个数据源）
       #broadcast-tables: t_dict                
    props:
      # 是否打印逻辑SQL语句和实际SQL语句，建议调试时打印，在生产环境关闭
      sql:
        show: true
        
rocketmq:
    name-server: 192.168.43.101:9876
    producer:
        group: newProducer
        topic: newTopic      
mybatis-plus:
  mapper-locations: classpath*:mapper/*.xml
#是否输出Mybatis-Plus代执行的SQL语句
logging:
  level:
    com.example.demo: info
    org.springframework: debug
server:
  port: 8888
  
#rocketmq:
  #name-server: 192.168.43.101:9876
  #producer:
    #group: my-group

  #data:
    #elasticsearch:
      #cluster-nodes: 127.0.0.1:9300
      #repositories:
        #enabled: true


